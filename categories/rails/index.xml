<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails on Ilija Eftimov</title>
    <link>https://ieftimov.com/categories/rails/</link>
    <description>Recent content in Rails on Ilija Eftimov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 May 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ieftimov.com/categories/rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding why and how to add idempotent requests to your APIs</title>
      <link>https://ieftimov.com/post/understand-how-why-add-idempotent-requests-api/</link>
      <pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/understand-how-why-add-idempotent-requests-api/</guid>
      <description>Idempotency is an often used term in computer science. It&amp;rsquo;s meaning to some might not be known, to others it&amp;rsquo;s very well known. The explanation for idempotency on Wikipedia is:
 &amp;hellip; the property of certain operations in mathematics and computer science that they can be applied multiple times without changing the result beyond the initial application.
 Essentially, idempotency is the mathematical way of saying &amp;ldquo;one can apply a certain operation on something many times, without changing the result of the operation after the first time the operation is applied&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>How Rails handles status codes</title>
      <link>https://ieftimov.com/post/how-rails-handles-status-codes/</link>
      <pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/how-rails-handles-status-codes/</guid>
      <description>Recently, I have been building an API as part of my day job. Rails is a great framework to build APIs in, and it has been a joy so far. When building the responses of the API, it&amp;rsquo;s paramount to understand what HTTP statuses you should utilize, which will in return help the consumers by providing more meaningful responses.
Sure, you could always have a status property in the response JSON, which will be a human-readable status code.</description>
    </item>
    
    <item>
      <title>Running a Rails Application on Deis</title>
      <link>https://ieftimov.com/post/running-rails-app-deis/</link>
      <pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/running-rails-app-deis/</guid>
      <description>In the last couple of years, we have seen a lot of development in the devops field. It’s becoming much easier for developers to provision servers and deploy their applications on those servers just with a couple of key strokes. Since the start of the SaaS and PaaS products (even before we knew them as that), we have seen a vast number of companies and communities try to make our lives easier by developing smart tools that will fit into our workflow seamlessly.</description>
    </item>
    
    <item>
      <title>Rails, Secure Cookies, HSTS and friends</title>
      <link>https://ieftimov.com/post/rails-tls-hsts-cookies/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/rails-tls-hsts-cookies/</guid>
      <description>Ruby on Rails as a framework does a lot of things for us developers. We get a very customizable middleware stack, great routing system, very expressive ORM, helpful modules with great utility methods in them and so on. But in Rails there&amp;rsquo;s more than meets the eye. It does some great things that we just take for granted or on occasions we don&amp;rsquo;t even know they exist.
Some of these features are TLS redirection, secure cookies and HTTP Strict Transport Security (HSTS).</description>
    </item>
    
    <item>
      <title>Why and how to test Rake tasks in your Rails application</title>
      <link>https://ieftimov.com/post/test-rake-tasks/</link>
      <pubDate>Thu, 03 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/test-rake-tasks/</guid>
      <description>Most of us write some Rake tasks and completely forget about them. In fact, we rarely give any love to our Rake tasks. Well, I think it&amp;rsquo;s time we change that. Let&amp;rsquo;s see why and how we can test our Rake tasks.
But, why? Yes, it&amp;rsquo;s a legit question. You can always say &amp;ldquo;I already tested my classes!&amp;rdquo;. But, there are couple of reasons why you should always test your Rake tasks:</description>
    </item>
    
    <item>
      <title>How to write Rails middleware</title>
      <link>https://ieftimov.com/post/writing-rails-middleware/</link>
      <pubDate>Tue, 07 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/writing-rails-middleware/</guid>
      <description>In my last two posts about Rack, I wrote about the basics of Rack and how to write middleware. If you have no idea what this is about, I recommend reading the last two posts (in the order above). For the rest of you, carry on - today we will see how to write awesome Rails middleware and how to use it in any Rails application. Rails and Rack play together really nice, so keep on reading!</description>
    </item>
    
    <item>
      <title>RailsConf 2015 talks that you should watch</title>
      <link>https://ieftimov.com/post/railsconf-2015-talks-that-you-should-watch/</link>
      <pubDate>Mon, 04 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/railsconf-2015-talks-that-you-should-watch/</guid>
      <description>Recently Confreaks uploaded a ton of RailsConf 2015 talks on Youtube. Although I haven&amp;rsquo;t watched all of the talks, these are some of the ones that in my opinion are very worth watching. Keep in mind that this list will grow as I watch more talks over time. So, without further ado&amp;hellip;
So You Want to Start Refactoring? by @j3foley In this talk, Jillian Foley talks about refactoring. She shares some techniques about how to approach code that you haven&amp;rsquo;t written and how to easily refactor it.</description>
    </item>
    
  </channel>
</rss>