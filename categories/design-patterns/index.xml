<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design patterns on Ilija Eftimov</title>
    <link>https://ieftimov.com/categories/design-patterns/</link>
    <description>Recent content in Design patterns on Ilija Eftimov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © Ilija Eftimov</copyright>
    <lastBuildDate>Fri, 20 May 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ieftimov.com/categories/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        <item>
          <title>A bit about decorators and presenters</title>
          <link>https://ieftimov.com/post/decorators-and-presenters/</link>
          <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/decorators-and-presenters/</guid>
          <description>Object-oriented programming and design is (or, was?) a revolutionary way of thinking and designing programs. It introduced classes, objects, inheritance, polymorphism and many other ways to think about programming. As an addition, some very smart folks identified some pitfalls and patterns that occur in object-oriented programming and put them in books. That&#39;s how we got a list of general code smells, design patterns and refactoring patterns that we can use in our everyday work.</description>
        </item>
      
    
      
        <item>
          <title>Implementing &#34;the lovely&#34; Singleton Pattern</title>
          <link>https://ieftimov.com/post/singleton-pattern/</link>
          <pubDate>Tue, 26 May 2015 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/singleton-pattern/</guid>
          <description>In every software, there are some things that have to be unique. For example, a Rails app has only one logger. Also, applications must have configurations, like environment, various API keys and etc. Take the configuration example - we need only one configuration for a runtime of an application. If all of the configuration data is stored into a class, then the whole app will need to use an object of that class.</description>
        </item>
      
    
      
        <item>
          <title>Pattern to pattern: Template Method &amp; Strategy</title>
          <link>https://ieftimov.com/post/pattern-to-pattern-template-method-and-strategy/</link>
          <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/pattern-to-pattern-template-method-and-strategy/</guid>
          <description>Recently I wrote about the Template Method pattern and how it&#39;s implemented in Ruby. In the comments, one of the readers commented that the Template Method pattern is in fact the Strategy pattern. After thinking hard about how I should answer the question, I thought about writing a post comparing the two patterns. So, here it is - my version of design patterns head to head. Let&#39;s see what these two patterns have in common and what are their key differences.</description>
        </item>
      
    
      
        <item>
          <title>Template Method Pattern in Ruby</title>
          <link>https://ieftimov.com/post/template-method-pattern-in-ruby/</link>
          <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/template-method-pattern-in-ruby/</guid>
          <description>When working as a software developer, knowledge of some design patterns is always welcomed. If you&#39;ve never heard about design patterns, they are basically some general reusable patterns for common problems that developers run into. There&#39;s a big list of these and knowing all of them is a bit hard. Well, hard might not be the right word, but it takes a lot of practice to master them all. Lets take a look at one of the (in my opinion) easier patterns - the Template Method Pattern and implement it in Ruby.</description>
        </item>
      
    
  </channel>
</rss>


