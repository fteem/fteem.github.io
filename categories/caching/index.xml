<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>caching on Ilija Eftimov</title>
    <link>https://ieftimov.com/categories/caching/</link>
    <description>Recent content in caching on Ilija Eftimov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ieftimov.com/categories/caching/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Barebones model of Spotify&#39;s &#39;Recently Played&#39; screen using a Least Recently Used (LRU) cache in Golang</title>
      <link>https://ieftimov.com/post/spotify-recently-played-least-recently-used-cache-golang/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/spotify-recently-played-least-recently-used-cache-golang/</guid>
      <description>One of the most used caching schemes is Least Recently Used (LRU). Caches that use this eviction strategy will remove the least recently used item when their size reaches their capacity. That means that such caches have to keep a track of the order of access of the cached items, so it would evict the correct items.
Before we go too much into details about the implementation of an LRU cache, let&amp;rsquo;s first see what are the possible applications of this caching scheme.</description>
    </item>
    
    <item>
      <title>When and Why to use a Least Frequently Used (LFU) cache with an implementation in Golang</title>
      <link>https://ieftimov.com/post/when-why-least-frequently-used-cache-implementation-golang/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/when-why-least-frequently-used-cache-implementation-golang/</guid>
      <description>Over the years, people involved in computer science and engineering have worked really hard on optimisations of various natures. Given that we live in a world with limited resources, humanity has always worked on ways to optimise the costs and speed literally everything.
In software engineering, I would argue, the most popular approach to performance improvement is caching. While there are various applications of caching, depending on the area of software engineering, the idea behind caching is quite simple: store data that is often needed/used in fast structure/storage so it can be retrieved very fast.</description>
    </item>
    
  </channel>
</rss>