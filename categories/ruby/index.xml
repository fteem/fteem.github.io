<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Ilija Eftimov</title>
    <link>https://ieftimov.com/categories/ruby/</link>
    <description>Recent content in Ruby on Ilija Eftimov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2014 - 2019 Ilija Eftimov</copyright>
    <lastBuildDate>Thu, 02 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ieftimov.com/categories/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding why and how to add idempotent requests to your APIs</title>
      <link>https://ieftimov.com/post/understand-how-why-add-idempotent-requests-api/</link>
      <pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/understand-how-why-add-idempotent-requests-api/</guid>
      <description>Idempotency is an often used term in computer science. It&#39;s meaning to some might not be known, to others it&#39;s very well known. The explanation for idempotency on Wikipedia is:
 &amp;hellip; the property of certain operations in mathematics and computer science that they can be applied multiple times without changing the result beyond the initial application.
 Essentially, idempotency is the mathematical way of saying &amp;ldquo;one can apply a certain operation on something many times, without changing the result of the operation after the first time the operation is applied&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Versioning REST APIs: The Theory and Using Grape in Ruby</title>
      <link>https://ieftimov.com/post/versioning-ruby-grape-apis/</link>
      <pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/versioning-ruby-grape-apis/</guid>
      <description>Nowadays, having an API on top of your application is considered common. I&#39;ve often been disapointed when I&#39;ve been expecting an API of a product I like to find none. There are powerful tools out there that allow easy API integrations, like IFTTT.com. Also, if you want to build a mobile application to work aside your product (or maybe your product is mobile-first), then an API is a must-have - there’s no way around it.</description>
    </item>
    
    <item>
      <title>What happens when you DELETE a resource?</title>
      <link>https://ieftimov.com/post/when-you-delete-an-api-resource/</link>
      <pubDate>Sat, 29 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/when-you-delete-an-api-resource/</guid>
      <description>Have you ever found yourself publishing an API, either an internal or a public one? Have your ever heard from the consumers of those same APIs back? Are they happy about the functionality of your APIs and their design? You already know, there is no perfect design, but API design has to be taken very seriously. Why? Because evolving and changing APIS is hard and time consuming.
Imagine you are on a team in a company, that has set off to design a company-wide API guideline and a blueprint.</description>
    </item>
    
    <item>
      <title>Sprinkle some HATEOAS on your Rails APIs</title>
      <link>https://ieftimov.com/post/sprinkle-some-hateoas-on-rails-apis/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/sprinkle-some-hateoas-on-rails-apis/</guid>
      <description>REST as a concept was introduced by Roy Fielding in his doctoral thesis, named Architectural Styles and the Design of Network-based Software Architectures. 16 years later, REST as an architecture is the most widely accepted way to design and build APIs. I am sure we have all heard about it, and most of us think we are building actual RESTful APIs. But, are we?
Let&#39;s remind ourselves what REST is and then continue on something else that supplements REST, called HATEOAS.</description>
    </item>
    
    <item>
      <title>The practicality of designing and describing your APIs</title>
      <link>https://ieftimov.com/post/practicality-designing-describing-apis/</link>
      <pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/practicality-designing-describing-apis/</guid>
      <description>The web, as we all know, is driven by APIs. Since the rise of mobile applications and the JavaScript driven single-page applications, APIs became even more popular, as a unified way for the clients to communicate with the back-end. Most of the companies use internal APIs for different purposes. Some use them to expose resources, data or behaviour. Others, use them for authentication and authorisation, some do it for controlling the hardware layer with smart implementations under the hood.</description>
    </item>
    
    <item>
      <title>Write your first Rubygems plugin</title>
      <link>https://ieftimov.com/post/your-first-rubygem-plugin/</link>
      <pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/your-first-rubygem-plugin/</guid>
      <description>I don&#39;t think that at this point Rubygems needs any introduction. Except if you have been living under a rock for the last 10 years or so. In that case, I think that you wouldn&#39;t be here reading this blog. You would be having a problem understanding why someone would like to share what they are eating, or what they are doing at the moment. For the rest of you, have you heard that Rubygems is extensible?</description>
    </item>
    
    <item>
      <title>You Can&#39;t Rescue Them All</title>
      <link>https://ieftimov.com/post/you-cant-rescue-them-all/</link>
      <pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/you-cant-rescue-them-all/</guid>
      <description>Imagine you just woke up, took a shower and you immediately go to your coffee machine to make that strong, large, morning, double-shot, extra-spice-and-everything-nice cup of coffee. Sure, you go to the machine, press some buttons and the next thing you know, you are waiting for the coffee to start pouring into your cup. And then, something&#39;s not right, and something starts to smell bad. A morning nightmare, right?
Nothing Works All the Time You know, most of the things in our daily lives do not work at 100%.</description>
    </item>
    
    <item>
      <title>Refactoring in Ruby: Primitive Obsession</title>
      <link>https://ieftimov.com/post/primitive-obsession-ruby/</link>
      <pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/primitive-obsession-ruby/</guid>
      <description>We&#39;ve all been at this point where we have bloated our classes with primitive values all over the place. Usually, we drop in primitive constants that, for whatever reason, we think that are a good fit to the class. Or sometimes, we just dump primitive values instead of small objects, thinking &amp;ldquo;it&#39;s okay, it&#39;s just an attribute in the class&amp;rdquo;. But, does it always make sense?
The problem Say we have a project for a finance journalist who wants us to automate his text editor to do some random fixes to his texts, on the fly.</description>
    </item>
    
    <item>
      <title>Refactoring in Ruby: The right place for a Builder?</title>
      <link>https://ieftimov.com/post/refactoring-builder-pattern/</link>
      <pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/refactoring-builder-pattern/</guid>
      <description>Recently I started tackling refactoring in Ruby with my blog posts. It seems that it&#39;s one of the most popular topics that people would like to read about, so here I am with another installment of refactoring in Ruby. This time, we will see if it&#39;s the right time and place for a Builder&amp;hellip; whatever that means.
Just a bit of backstory In my last post on refactoring in Ruby, I covered how to detect and refactor the long parameters code smell.</description>
    </item>
    
    <item>
      <title>Refactoring in Ruby: Smelly Parameters Lists</title>
      <link>https://ieftimov.com/post/refactoring-smelly-parameters-lists/</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/refactoring-smelly-parameters-lists/</guid>
      <description>Ruby is a really clear and expressive language, but we developers sure know how to make a mess. Even when you think your classes are nicely written and tested, things can still get out of hand. I am pretty sure you&#39;ve heard one (or more) of your more experienced colleagues/mentors tell you that &amp;ldquo;something is smelly&amp;rdquo; in the code. Well, in this article we will cover one of the simplest code smells</description>
    </item>
    
    <item>
      <title>Refactoring in Ruby: TDD your way through Extract Class</title>
      <link>https://ieftimov.com/post/tdd-extract-class/</link>
      <pubDate>Mon, 28 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/tdd-extract-class/</guid>
      <description>There are a lot of refactoring patterns available out there for us. I assume that most of us use these patterns, at certain times without being aware that those refactoring steps are defined as a pattern in the past. In this post, I will take you through an example of refactoring Ruby code with the Extract Class pattern by using Test-Driven Development.
Let&#39;s dive in!
What went wrong at the test?</description>
    </item>
    
    <item>
      <title>Getting Started with Minitest</title>
      <link>https://ieftimov.com/post/getting-started-with-minitest/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/getting-started-with-minitest/</guid>
      <description>Learn how to integrate Minitest into your Ruby project and reap the benefits of test-driven development.
Read the article here.</description>
    </item>
    
    <item>
      <title>Testing Ruby Mixins with Minitest in isolation</title>
      <link>https://ieftimov.com/post/testing-mixins-minitest/</link>
      <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/testing-mixins-minitest/</guid>
      <description>Mixins in Ruby are a very powerful feature. But knowing how to test them sometimes is not so obvious, especially to beginners. I think that this comes from mixins&amp;rsquo; nature - they get mixed into other classes. So, if you think that there is a lot to testing mixins and you easily get overwhelmed by it - take it easy, it&#39;s not that hard.
Let&#39;s see how easy it is to test mixins, with some help from the lovely Minitest.</description>
    </item>
    
    <item>
      <title>Variable hoisting in Ruby</title>
      <link>https://ieftimov.com/post/variable-hoisting-ruby/</link>
      <pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/variable-hoisting-ruby/</guid>
      <description>Have you ever heard of hoisting? Well, regardless if you have or you have not, Ruby has an interesting hositing mechanism built-in. Let&#39;s take a dive and see how it creates variables and do some experiments with it.
Hoisting What is hoisting? Well, according to Google &amp;ldquo;hoist&amp;rdquo; means to raise something. Apparently, with with ropes and pulleys. At least, back in the day.
Well, when it comes to variable hoisting, it&#39;s basically a mechanism by which the language, in our context - Ruby, declares and defines variables.</description>
    </item>
    
    <item>
      <title>TDD Patterns: Humble Object</title>
      <link>https://ieftimov.com/post/tdd-humble-object/</link>
      <pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/tdd-humble-object/</guid>
      <description>We all know that there are different design patterns. They are all quite trivial to learn, but, the trick lies in applying them. When should we use this or that pattern and will that help in making our code better and cleaner. Well, tests are code as well and, you guessed it, there are some testing patterns that are around for a while.
Today, we will take a look at one of them.</description>
    </item>
    
    <item>
      <title>Test Doubles: in theory, in Minitest and in RSpec</title>
      <link>https://ieftimov.com/post/test-doubles-theory-minitest-rspec/</link>
      <pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/test-doubles-theory-minitest-rspec/</guid>
      <description>Those of us that do Test Driven Development have heard about doubles, mocks, stubs, fakes and spies multiple times. Unfortunately there is a ton of confusion about all these words and their meaning. Let&#39;s see what each an every one of these really mean, where we should use them and how the popular testing frameworks for Ruby implement these.
Test Doubles So, first things first. One of the biggest misconceptions is that doubles are types of objects that are used in testing.</description>
    </item>
    
    <item>
      <title>Exception handling and testing it with Minitest</title>
      <link>https://ieftimov.com/post/exception-handling-and-testing/</link>
      <pubDate>Wed, 29 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/exception-handling-and-testing/</guid>
      <description>When testing our code, we usually go for the happy path (TM). We are awesome developers, we test our code, we are careful and there&#39;s no way our code might crash. Or not really? I often try to think of software as a live being. It thinks, it does stuff and sometimes it gets some things wrong. Just like us. We sometimes trip up while walking, we drop our keys or forget them on our desk at the office.</description>
    </item>
    
    <item>
      <title>Testing Ruby&#39;s floats precision</title>
      <link>https://ieftimov.com/post/testing-floats-in-ruby/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/testing-floats-in-ruby/</guid>
      <description>Float precision in Ruby is a well known quirk. But when testing floats, not many of us bother to remember this and make their tests respectful to this quirk. In this post we will see how the popular Ruby testing frameworks help us test floats properly.
Background story Last week I published a post about migrating a test suite from RSpec to Minitest. What was very interesting is that I got a mention on Twitter from Ryan Davis with an offer for a code review of the migration.</description>
    </item>
    
    <item>
      <title>Migrating a test suite from RSpec to Minitest</title>
      <link>https://ieftimov.com/post/migrate-rspec-to-minitest/</link>
      <pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/migrate-rspec-to-minitest/</guid>
      <description>I have always wanted to have some fun with Minitest but until this weekend I never got the chance to do it. For those of you that don&#39;t know, Minitest is a suite of testing facilities, that support TDD, BDD, mocking and benchmarking. Having wanted to play with Minitest, this weekend I decided that I will migrate the test suite of a gem of mine, from RSpec to Minitest. Read on to see how it all went.</description>
    </item>
    
    <item>
      <title>Rack: Writing middleware</title>
      <link>https://ieftimov.com/post/writing-rack-middleware/</link>
      <pubDate>Sun, 28 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/writing-rack-middleware/</guid>
      <description>Last time I wrote about the basics of Rack and writing a tiny Rack application. If you are unsure what Rack is and what is it&#39;s purpose, I recommend you read the other post, famirialize yourself with Rack and get back to this post. If you think you know enough about Rack, please, carry on reading.
Enter: Middleware So, middleware. Lets take it from the basics. What is middleware? Remember that Rack &amp;ldquo;wraps&amp;rdquo; HTTP requests and responses?</description>
    </item>
    
    <item>
      <title>Rack: First Principles</title>
      <link>https://ieftimov.com/post/rack-first-principles/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/rack-first-principles/</guid>
      <description>About three years ago, when I started working with Ruby and Rails, I noticed that the term &amp;ldquo;Rack&amp;rdquo; always came up in my Google searches. Overwhelmed with all of the stuff I needed to learn combined with the awesomeness of Rails, which shields the new Rails devs from it&#39;s internals, I never really understood Rack or writing Rack apps. Although I used to see people mentioning &amp;ldquo;middleware&amp;rdquo; or &amp;ldquo;Rack middleware&amp;rdquo; I never really wrote (or tried to write) any middleware.</description>
    </item>
    
    <item>
      <title>Implementing &#34;the lovely&#34; Singleton Pattern</title>
      <link>https://ieftimov.com/post/singleton-pattern/</link>
      <pubDate>Tue, 26 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/singleton-pattern/</guid>
      <description>In every software, there are some things that have to be unique. For example, a Rails app has only one logger. Also, applications must have configurations, like environment, various API keys and etc. Take the configuration example - we need only one configuration for a runtime of an application. If all of the configuration data is stored into a class, then the whole app will need to use an object of that class.</description>
    </item>
    
    <item>
      <title>How to: YourGem.configure</title>
      <link>https://ieftimov.com/post/how-to-yourgem-configure/</link>
      <pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/how-to-yourgem-configure/</guid>
      <description>Really cool gems, like Carrierwave for example, have this neat feature of configuring the gem in runtime. It allows you to easily configure how the gem will behave in your app. For example, you can add various authentication keys, how errors should be handled and what not. If you want to add this cool functionality in your gems, read on to find out more.
Personally, I love to implement (and use) this way of configuring libraries in runtime.</description>
    </item>
    
    <item>
      <title>How to write RSpec formatters from scratch</title>
      <link>https://ieftimov.com/post/how-to-write-rspec-formatters-from-scratch/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/how-to-write-rspec-formatters-from-scratch/</guid>
      <description>Recently I did an experiment with RSpec&#39;s formatters. Turns out, the output that RSpec returns when you run your specs can be very customized for your own needs. Read on to learn how you can write custom RSpec formatters.
Writing custom formatters RSpec allows customization of the output by creating your own Formatter class. Yep, it&#39;s that easy. You just need to write one class and than require it into RSpec&#39;s configuration to use it.</description>
    </item>
    
    <item>
      <title>Pattern to pattern: Template Method &amp; Strategy</title>
      <link>https://ieftimov.com/post/pattern-to-pattern-template-method-and-strategy/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/pattern-to-pattern-template-method-and-strategy/</guid>
      <description>Recently I wrote about the Template Method pattern and how it&#39;s implemented in Ruby. In the comments, one of the readers commented that the Template Method pattern is in fact the Strategy pattern. After thinking hard about how I should answer the question, I thought about writing a post comparing the two patterns. So, here it is - my version of design patterns head to head. Let&#39;s see what these two patterns have in common and what are their key differences.</description>
    </item>
    
    <item>
      <title>Exploring new methods in Ruby 2.2.0</title>
      <link>https://ieftimov.com/post/exploring-new-methods-in-ruby-two-point-two/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/exploring-new-methods-in-ruby-two-point-two/</guid>
      <description>For those late to the Ruby 2.2.0 party like me, aside from the changes (and updates) the core team made under the hood for this version, they introduced couple of new methods to the Enumerable module and to the_ Method, Float, File_ and _String_ classes. Lets take a look at these methods and explore how we can use them in our everyday jobs. Just a heads up, make sure you **use Ruby 2.</description>
    </item>
    
    <item>
      <title>Using multiple sources in a Gemfile</title>
      <link>https://ieftimov.com/post/using-multiple-sources-in-a-gemfile/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/using-multiple-sources-in-a-gemfile/</guid>
      <description>Gemfiles require at least one gem source, in the form of the URL for a RubyGems server. Although it&#39;s not recommended, it&#39;s possible as of Bundler 1.7, to add multiple global source lines. Each of these sources has to be a valid Rubygems repository.
When using multiple sources, bundler shows a warning message:
Although, this warning can be disabled by running the
bundle config disable_multisource true
command, there&#39;s a better approach to this.</description>
    </item>
    
    <item>
      <title>Template Method Pattern in Ruby</title>
      <link>https://ieftimov.com/post/template-method-pattern-in-ruby/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/template-method-pattern-in-ruby/</guid>
      <description>When working as a software developer, knowledge of some design patterns is always welcomed. If you&#39;ve never heard about design patterns, they are basically some general reusable patterns for common problems that developers run into. There&#39;s a big list of these and knowing all of them is a bit hard. Well, hard might not be the right word, but it takes a lot of practice to master them all. Lets take a look at one of the (in my opinion) easier patterns</description>
    </item>
    
  </channel>
</rss>