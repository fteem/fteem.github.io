<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>grpc on Ilija Eftimov ⚡️</title><link>https://ieftimov.com/categories/grpc/</link><description>Recent content in grpc on Ilija Eftimov ⚡️</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright 2022 © Ilija Eftimov</copyright><lastBuildDate>Sun, 12 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ieftimov.com/categories/grpc/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating and testing gRPC server interceptors in Ruby</title><link>https://ieftimov.com/post/creating-testing-grpc-server-interceptors-ruby/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/creating-testing-grpc-server-interceptors-ruby/</guid><description>If your experience is rooted in HTTP-land, then you are probably familiar with the concept of server middleware. Interceptors are analogous, but in gRPC land. When first building gRPC interceptors, I had trouble figuring out how to do it in Ruby. gRPC is not that widely used in the Ruby ecosystem, and there are not many resources on how to properly do it.
Also, my experience with writing unit and integration tests for interceptors were that there is even less documentation on the topic.</description></item></channel></rss>