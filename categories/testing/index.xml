<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Ilija Eftimov</title>
    <link>https://ieftimov.com/categories/testing/</link>
    <description>Recent content in Testing on Ilija Eftimov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright Â© 2014 - 2019 Ilija Eftimov</copyright>
    <lastBuildDate>Thu, 03 Dec 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ieftimov.com/categories/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        <item>
          <title>Why and how to test Rake tasks in your Rails application</title>
          <link>https://ieftimov.com/post/test-rake-tasks/</link>
          <pubDate>Thu, 03 Dec 2015 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/test-rake-tasks/</guid>
          <description>Most of us write some Rake tasks and completely forget about them. In fact, we rarely give any love to our Rake tasks. Well, I think it&#39;s time we change that. Let&#39;s see why and how we can test our Rake tasks.
But, why? Yes, it&#39;s a legit question. You can always say &amp;ldquo;I already tested my classes!&amp;quot;. But, there are couple of reasons why you should always test your Rake tasks:</description>
        </item>
      
    
      
        <item>
          <title>TDD Patterns: Humble Object</title>
          <link>https://ieftimov.com/post/tdd-humble-object/</link>
          <pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/tdd-humble-object/</guid>
          <description>We all know that there are different design patterns. They are all quite trivial to learn, but, the trick lies in applying them. When should we use this or that pattern and will that help in making our code better and cleaner. Well, tests are code as well and, you guessed it, there are some testing patterns that are around for a while.
Today, we will take a look at one of them.</description>
        </item>
      
    
      
        <item>
          <title>Test Doubles: in theory, in Minitest and in RSpec</title>
          <link>https://ieftimov.com/post/test-doubles-theory-minitest-rspec/</link>
          <pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/test-doubles-theory-minitest-rspec/</guid>
          <description>Those of us that do Test Driven Development have heard about doubles, mocks, stubs, fakes and spies multiple times. Unfortunately there is a ton of confusion about all these words and their meaning. Let&#39;s see what each an every one of these really mean, where we should use them and how the popular testing frameworks for Ruby implement these.
Test Doubles So, first things first. One of the biggest misconceptions is that doubles are types of objects that are used in testing.</description>
        </item>
      
    
      
        <item>
          <title>Testing Ruby&#39;s floats precision</title>
          <link>https://ieftimov.com/post/testing-floats-in-ruby/</link>
          <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/testing-floats-in-ruby/</guid>
          <description>Float precision in Ruby is a well known quirk. But when testing floats, not many of us bother to remember this and make their tests respectful to this quirk. In this post we will see how the popular Ruby testing frameworks help us test floats properly.
Background story Last week I published a post about migrating a test suite from RSpec to Minitest. What was very interesting is that I got a mention on Twitter from Ryan Davis with an offer for a code review of the migration.</description>
        </item>
      
    
      
        <item>
          <title>Migrating a test suite from RSpec to Minitest</title>
          <link>https://ieftimov.com/post/migrate-rspec-to-minitest/</link>
          <pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/migrate-rspec-to-minitest/</guid>
          <description>I have always wanted to have some fun with Minitest but until this weekend I never got the chance to do it. For those of you that don&#39;t know, Minitest is a suite of testing facilities, that support TDD, BDD, mocking and benchmarking. Having wanted to play with Minitest, this weekend I decided that I will migrate the test suite of a gem of mine, from RSpec to Minitest. Read on to see how it all went.</description>
        </item>
      
    
      
        <item>
          <title>Test-Driven Thinking</title>
          <link>https://ieftimov.com/post/test-driven-thinking/</link>
          <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/test-driven-thinking/</guid>
          <description>There has always been a lot of noise about Test-Driven Development (TDD), best practices and it&#39;s pros and cons. I don&#39;t know if you remember, but last year DHH, Kent Beck and Martin Fowler had a series of public hangouts where they shared their opinions on TDD and testing in general and engaged in a very interesting discussion. These hangouts were recorded and in my opnion - they are a must watch.</description>
        </item>
      
    
  </channel>
</rss>


