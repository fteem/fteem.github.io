<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>REST on Ilija Eftimov</title>
    <link>https://ieftimov.com/categories/rest/</link>
    <description>Recent content in REST on Ilija Eftimov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2014 - 2020 Ilija Eftimov</copyright>
    <lastBuildDate>Sat, 07 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ieftimov.com/categories/rest/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        <item>
          <title>Versioning REST APIs: The Theory and Using Grape in Ruby</title>
          <link>https://ieftimov.com/post/versioning-ruby-grape-apis/</link>
          <pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/versioning-ruby-grape-apis/</guid>
          <description>Nowadays, having an API on top of your application is considered common. I&#39;ve often been disapointed when I&#39;ve been expecting an API of a product I like to find none. There are powerful tools out there that allow easy API integrations, like IFTTT.com. Also, if you want to build a mobile application to work aside your product (or maybe your product is mobile-first), then an API is a must-have - there’s no way around it.</description>
        </item>
      
    
      
        <item>
          <title>What happens when you DELETE a resource?</title>
          <link>https://ieftimov.com/post/when-you-delete-an-api-resource/</link>
          <pubDate>Sat, 29 Oct 2016 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/when-you-delete-an-api-resource/</guid>
          <description>Have you ever found yourself publishing an API, either an internal or a public one? Have your ever heard from the consumers of those same APIs back? Are they happy about the functionality of your APIs and their design? You already know, there is no perfect design, but API design has to be taken very seriously. Why? Because evolving and changing APIS is hard and time consuming.
Imagine you are on a team in a company, that has set off to design a company-wide API guideline and a blueprint.</description>
        </item>
      
    
      
        <item>
          <title>Sprinkle some HATEOAS on your Rails APIs</title>
          <link>https://ieftimov.com/post/sprinkle-some-hateoas-on-rails-apis/</link>
          <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/sprinkle-some-hateoas-on-rails-apis/</guid>
          <description>REST as a concept was introduced by Roy Fielding in his doctoral thesis, named Architectural Styles and the Design of Network-based Software Architectures. 16 years later, REST as an architecture is the most widely accepted way to design and build APIs. I am sure we have all heard about it, and most of us think we are building actual RESTful APIs. But, are we?
Let&#39;s remind ourselves what REST is and then continue on something else that supplements REST, called HATEOAS.</description>
        </item>
      
    
  </channel>
</rss>


