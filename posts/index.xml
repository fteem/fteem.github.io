<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Ilija Eftimov ⚡️</title><link>https://ieftimov.com/posts/</link><description>Recent content in Posts on Ilija Eftimov ⚡️</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright 2021 © Ilija Eftimov</copyright><lastBuildDate>Tue, 01 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ieftimov.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Conditional HTTP GET: The fastest requests need no response body</title><link>https://ieftimov.com/post/conditional-http-get-fastest-requests-need-no-response-body/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/conditional-http-get-fastest-requests-need-no-response-body/</guid><description>HTTP caching 101 Every browser implements its own in-memory caching. The information about the cache size per browser is spotty, but there&amp;rsquo;s one thing for sure: the cache sizes vary. The great thing is that browsers are smart nowadays – they manage their caches opaquely for us, the end-users.
There are a few ways to put these caches to use. But it all starts with HTTP caching directives (or headers). The two HTTP response headers used for specifying freshness (another word for should something be cached) are Cache-Control and Expires:</description></item><item><title>Deep dive in CORS: History, how it works, and best practices</title><link>https://ieftimov.com/post/deep-dive-cors-history-how-it-works-best-practices/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/deep-dive-cors-history-how-it-works-best-practices/</guid><description>The error in your browser&amp;rsquo;s console No &amp;lsquo;Access-Control-Allow-Origin&amp;rsquo; header is present on the requested resource.
Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://example.com/
Access to fetch at &amp;lsquo;https://example.com&amp;rsquo; from origin &amp;lsquo;http://localhost:3000&amp;rsquo; has been blocked by CORS policy.
I am sure you&amp;rsquo;ve seen one of these errors, or a variation, in your browser&amp;rsquo;s console. If you have not – don&amp;rsquo;t fret, you soon will.</description></item><item><title>Testing in Go: Stop Leaking Files</title><link>https://ieftimov.com/post/testing-in-go-stop-leaking-files/</link><pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-stop-leaking-files/</guid><description>No test suite is perfect. Some test suites are missing good helper functions; others are under-configured or over-customize. Some have obsolete packages included and are left unmaintained. Folks that have experience with more mature projects will likely agree that all of the above can be found in the wild.
Often, when we test our Go programs, need to create files. Such files can be just fixture files, or whole file trees, to set up the correct environment for the tests to run.</description></item><item><title>Four Steps to Daemonize Your Go Programs</title><link>https://ieftimov.com/post/four-steps-daemonize-your-golang-programs/</link><pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/four-steps-daemonize-your-golang-programs/</guid><description>If you have ever worked with Ruby, or have maybe maintained a Rails application, I am sure the name Sidekiq will sound familiar. For those unfamiliar with the project, Sidekiq is a job system for Ruby. It is a wildly popular project, and the author has turned it into a successful business.
None of the above would be relevant if Sidekiq&amp;rsquo;s author Mike Perham, in 2014, did not write a concise and informative post titled &amp;ldquo;Don&amp;rsquo;t Daemonize your Daemons!</description></item><item><title>Understanding bytes in Go by building a TCP protocol</title><link>https://ieftimov.com/post/understanding-bytes-golang-build-tcp-protocol/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/understanding-bytes-golang-build-tcp-protocol/</guid><description>Some of my newsletter subscribers have asked me a few times what is the easiest way to think about byte slices, or using Go&amp;rsquo;s syntax: []byte. Folks that have experience with low-level languages, where working with bytes is widespread, usually do not have challenges comprehending what []byte means and how to use it.
But, if you come from a dynamic or a high-level language background, although everything we do ends up being a bunch of bytes, higher-level languages hide such details from us.</description></item><item><title>Testing in Go: WebSockets</title><link>https://ieftimov.com/post/testing-in-go-websockets/</link><pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-websockets/</guid><description>WebSockets offer duplex communication from a non-trusted source to a server that we own across a TCP socket connection. This means that, instead of continually polling the web server for updates and having to perform the whole TCP dance with each request, we can maintain a single TCP socket connection and then send and listen to messages on said connection.
In Go&amp;rsquo;s ecosystem there are few different implementations of the WebSocket protocol.</description></item><item><title>Testing in Go: HTTP Servers</title><link>https://ieftimov.com/post/testing-in-go-testing-http-servers/</link><pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-testing-http-servers/</guid><description>Go&amp;rsquo;s a great hammer for a lot of nails, one of the areas where I find it fitting is building HTTP servers. The net/http package of Go&amp;rsquo;s standard library makes it easy to attach HTTP handlers to any Go program. What I find delightful is that Go&amp;rsquo;s standard library, also has packages that make testing HTTP servers as easy as building them.
Nowadays, it&amp;rsquo;s widely accepted that test coverage is important and useful.</description></item><item><title>Testing in Go: Clean Tests Using t.Cleanup</title><link>https://ieftimov.com/post/testing-in-go-clean-tests-using-t-cleanup/</link><pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-clean-tests-using-t-cleanup/</guid><description>Go v1.14 ships with improvements across different aspects of the language. Two of them are brand new t.Cleanup, and b.Cleanup methods, added to the testing package.
The introduction of these methods will make it easier for our tests to clean up after themselves. This was always achievable through the careful composition of (sub)tests and helper functions, but since Go 1.14, the testing package will ship with one right way to do that.</description></item><item><title>Testing in Go: Golden Files</title><link>https://ieftimov.com/post/testing-in-go-golden-files/</link><pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-golden-files/</guid><description>Hardcoding the expected values in an assertion is a straightforward approach in testing. Most of the time, we know the expected output of the unit under test, so simply adding the raw value to the assertion works well.
Things can get tricky when we are testing a unit whose output is cumbersome to hardcode. The straightforward remedy is to extract this cumbersome value to a file that we can then read and compare the output of the unit under test to the output of the file.</description></item><item><title>Make resilient Go net/http servers using timeouts, deadlines and context cancellation</title><link>https://ieftimov.com/post/make-resilient-golang-net-http-servers-using-timeouts-deadlines-context-cancellation/</link><pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/make-resilient-golang-net-http-servers-using-timeouts-deadlines-context-cancellation/</guid><description>When it comes to timeouts, there are two types of people: those who know how tricky they can be, and those who are yet to find out.
As tricky as they are, timeouts are a reality in the connected world we live in. As I am writing this, on the other side of the table, two persons are typing on their smartphones, probably chatting to people very far from them. All made possible because of networks.</description></item><item><title>Testing in Go: Test Doubles by Example</title><link>https://ieftimov.com/post/testing-in-go-test-doubles-by-example/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-test-doubles-by-example/</guid><description>One of the biggest misconceptions is that doubles are a specific implementation of mocks or other testing constructs that we use in testing.
Dummies, mocks, stubs, fakes, and spies ARE test doubles. Test double is the category of these test constructs. Over the years, there has been some confusion around this concept.
It is my observation that this confusion arises from the naming of testing constructs that the popular testing frameworks use.</description></item><item><title>Testing in Go: Dependency Injection</title><link>https://ieftimov.com/post/testing-in-go-dependency-injection/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-dependency-injection/</guid><description>In software engineering, over the years folks have developed many patterns, techniques and refactoring maneuvers. Some have been long forgotten, while others have stood the test of times.
Such a long-standing technique is dependency injection. It is a concept and a programming technique where a construct is passed (injected) to another construct that depends on it.
In Golang, like in other languages, we use it to simplify our code and make it more testable.</description></item><item><title>Simple Golang database seeding abstraction for Gorm</title><link>https://ieftimov.com/post/simple-golang-database-seeding-abstraction-gorm/</link><pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/simple-golang-database-seeding-abstraction-gorm/</guid><description>One of the most feature-full ORMs for Go that I have worked with is Gorm. If you would like to learn more about it, I recommend checking out its official website and its documentation.
Recenlty I wanted to write a small database seeding abstraction. Database seeding is a process in which an initial set of data is provided to a database when it is being set up or installed.</description></item><item><title>Testing in Go: Fixtures</title><link>https://ieftimov.com/post/testing-in-go-fixtures/</link><pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-fixtures/</guid><description>When I was researching the topic of test fixtures, I couldn&amp;rsquo;t find much about their beginnings. My first search was about the name of the person who coined &amp;ldquo;test fixtures&amp;rdquo;. Unfortunately, that was not a fruitful edeavour. The next logical step was to look for etymology of the phrase &amp;ldquo;test fixtures&amp;rdquo;, but the only search result that made sense was a Wikipedia page on the topic.
Judging by the Wiki page, it&amp;rsquo;s clear that test fixutures as a concept has been heavily popularized by Ruby on Rails.</description></item><item><title>Testing in Go: Subtests</title><link>https://ieftimov.com/post/testing-in-go-subtests/</link><pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-subtests/</guid><description>Before we begin: The content in this article assumes knowledge of table-driven tests in Go. If you are unfamiliar with the concept, read this article to familiarize yourself.
With table-driven tests as the most popular testing approach, there is one annoying problem that every programmer will face: running selective tests. That&amp;rsquo;s because the traditional method of testing using table-driven tests in a single test function is not decomposable in granular subfunctions.</description></item><item><title>Testing in Go: Table-Driven Tests</title><link>https://ieftimov.com/post/testing-in-go-table-driven-tests/</link><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-table-driven-tests/</guid><description>Coming from Ruby, which has excellent testing tools and libraries, the notion of table-driven tests was unusual for me. The widespread testing libraries in Ruby, such as RSpec, force the programmer to approach testing from a BDD standpoint. Thus, coming to Go and learning about the table-driven test was a new way of looking at tests for me.
Looking back, Dave Cheney&amp;rsquo;s 2013 seminal blog post &amp;ldquo;Writing table driven-tests in Go&amp;rdquo; was very likely my gateway to table-driven tests.</description></item><item><title>Testing in Go: go test</title><link>https://ieftimov.com/post/testing-in-go-go-test/</link><pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-go-test/</guid><description>If you remember anything from this article, remember this: go test is a command that automates the execution of test files and functions in a Go project. The go test command ships with Go itself, so if you have Golang installed, there&amp;rsquo;s nothing to check - it&amp;rsquo;s available on your machine.
go test will recompile each package and any files with names matching the file pattern *_test.go. These *_test.go files can contain test functions, benchmark functions, and example functions.</description></item><item><title>Testing in Go: Naming Conventions</title><link>https://ieftimov.com/post/testing-in-go-naming-conventions/</link><pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-naming-conventions/</guid><description>Programming languages and tools often have conventions. These conventions help make our work more straightforward. Just like all tools out there, Go also has some conventions when it comes to testing. Some are defined in the language itself (official), while others are coined by community members (unofficial).
In this article we will look at the naming conventions for files, functions and variables separately.
File and package naming conventions Go&amp;rsquo;s testing package comes with an expectation that any test file must have a _test.</description></item><item><title>Testing in Go: Writing Practical Failure Messages</title><link>https://ieftimov.com/post/testing-in-go-writing-practical-failure-messages/</link><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-writing-practical-failure-messages/</guid><description>All developers appreciate code that works, yet we spend much of our working hours debugging existing code. When fixing existing code, what our test failures communicate is paramount to the debugging experience we have.
That&amp;rsquo;s why in this article we will look at what it means to write a meaningful test failure message. We will look at its structure and how we can use some simple techniques to improve our test failure messages.</description></item><item><title>Testing in Go: Failing Tests</title><link>https://ieftimov.com/post/testing-in-go-failing-tests/</link><pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-failing-tests/</guid><description>A short overview of the testing package The testing package from Golang&amp;rsquo;s standard library provides support for automated testing of Go packages. It is intended to be used in combination with the go test command. In combination with go test, this package expects certain naming conventions that we will cover in another article.
Still, for this article, we have to know that:
Every test file ends with *_test.go Every test function has the format TestXxx, where Xxx must not start with a lowercase letter The testing package exposes two different modes: testing and benchmarking.</description></item><item><title>Testing in Go: First Principles</title><link>https://ieftimov.com/post/testing-in-go-first-principles/</link><pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-in-go-first-principles/</guid><description>If you have any programming experience, whether that&amp;rsquo;s as a student or a professional, there&amp;rsquo;s a good chance you have heard about testing. It&amp;rsquo;s an omnipresent topic, be it at conferences, books, or articles. (See what I did there?)
Also, it seems like a topic that everyone agrees on - yes, testing is good, and we should do it. There are many reasons why folks consider testing good for your code&amp;rsquo;s quality.</description></item><item><title>Deep Dive in the Upcoming Go Error Inspection Changes</title><link>https://ieftimov.com/post/deep-dive-in-upcoming-go-error-inspection-changes/</link><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/deep-dive-in-upcoming-go-error-inspection-changes/</guid><description>The team behind the language started working on a document titled &amp;ldquo;Go 2 Draft Designs&amp;rdquo;. The draft document is part of the design process for Go v2.0. In this article we will zoom in at the proposal for error inspection in Go 2.
What&amp;rsquo;s worth noting is that this is still part of a draft proposal. Still, from where we are standing at the moment, it&amp;rsquo;s certain that these changes will be added to the language starting Go v1.</description></item><item><title>My First dotGo Conference</title><link>https://ieftimov.com/post/my-first-dotgo-conference/</link><pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/my-first-dotgo-conference/</guid><description>This year&amp;rsquo;s dotGo in Paris was awesome. The people were great in general. The organisers and volunteers did a good job. The attendees that I interacted with were cool – I had some interesting conversations and made couple of connections. The talks were informative and engaging. If this is where you stop reading, please give dotGo a shot next year - I am sure it will be great! And please find me in the crowd and talk to me, because I&amp;rsquo;d love to talk to you.</description></item><item><title>Tell your team you are running late using Google Home, Google Cloud Functions, Golang and Twilio</title><link>https://ieftimov.com/post/tell-team-running-late-google-home-google-functions-golang-twilio/</link><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/tell-team-running-late-google-home-google-functions-golang-twilio/</guid><description>In this age of cloud platforms, Internet of Things and SaaS products that are easy to integrate with, the effort of automating parts of your life is shrinking down substantially with every year that goes by. Additionally, these services have very generous free plans (or are quite affordable), you won&amp;rsquo;t have to pay a fortune for this automation. In this article I&amp;rsquo;ll show you how you can create your own commands for your Google Home.</description></item><item><title>Barebones model of Spotify's 'Recently Played' screen using a Least Recently Used (LRU) cache in Golang</title><link>https://ieftimov.com/post/spotify-recently-played-least-recently-used-cache-golang/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/spotify-recently-played-least-recently-used-cache-golang/</guid><description>One of the most used caching schemes is Least Recently Used (LRU). Caches that use this eviction strategy will remove the least recently used item when their size reaches their capacity. That means that such caches have to keep a track of the order of access of the cached items, so it would evict the correct items.
Before we go too much into details about the implementation of an LRU cache, let&amp;rsquo;s first see what are the possible applications of this caching scheme.</description></item><item><title>When and Why to use a Least Frequently Used (LFU) cache with an implementation in Golang</title><link>https://ieftimov.com/post/when-why-least-frequently-used-cache-implementation-golang/</link><pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/when-why-least-frequently-used-cache-implementation-golang/</guid><description>Over the years, people involved in computer science and engineering have worked really hard on optimisations of various natures. Given that we live in a world with limited resources, humanity has always worked on ways to optimise the costs and speed literally everything.
In software engineering, I would argue, the most popular approach to performance improvement is caching. While there are various applications of caching, depending on the area of software engineering, the idea behind caching is quite simple: store data that is often needed/used in fast structure/storage so it can be retrieved very fast.</description></item><item><title>Golang Datastructures: Trees</title><link>https://ieftimov.com/post/golang-datastructures-trees/</link><pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/golang-datastructures-trees/</guid><description>You can spend quite a bit of your programming career without working with trees, or just by simply avoiding them if you don’t understand them (which is what I had been doing for a while).
Now, don&amp;rsquo;t get me wrong - arrays, lists, stacks and queues are quite powerful data structures and can take you pretty far, but there is a limit to their capabilities, how you can use them and how efficient that usage can be.</description></item><item><title>OTP in Elixir: Learn GenServer by Building Your Own URL Shortener</title><link>https://ieftimov.com/post/otp-elixir-genserver-build-own-url-shortener/</link><pubDate>Sat, 26 Jan 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/otp-elixir-genserver-build-own-url-shortener/</guid><description>Looking at any programming language you will (hopefully!) find a rich and useful standard library. I started my professional career as a software developer with Ruby, which has quite an easy-to-use and well-documented standard library with a plethora of modules and classes to use. Personally, I find the Enumerable module in Ruby with all its nice methods simply brilliant.
You might be coming from a different language, but I am sure that any serious programming language out there has a set of classes, modules, methods and functions to make your life (and work) easy.</description></item><item><title>Understanding the basics of Elixir's concurrency model</title><link>https://ieftimov.com/post/understanding-basics-elixir-concurrency-model/</link><pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/understanding-basics-elixir-concurrency-model/</guid><description>If you come from an object-oriented background, you might have tried concurrency in your favourite OO language before. Your mileage will vary, but in general OO languages are harder to work with when it comes to concurrency. This is due to their nature - they are designed to keep state in memory and require more expertise and experience to be successful with.
How does Elixir stand up to other languages when it comes to concurrency?</description></item><item><title>A deeper dive in Elixir's Plug</title><link>https://ieftimov.com/post/a-deeper-dive-in-elixir-plug/</link><pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/a-deeper-dive-in-elixir-plug/</guid><description>Being new to Elixir and Phoenix, I spend quite some time in the projects' documentation. One thing that stood out for me recently is the first sentence of Phoenix&amp;rsquo;s Plug documentation:
Plug lives at the heart of Phoenix’s HTTP layer and Phoenix puts Plug front and center.
So naturally, I felt compelled to take a deeper dive into Plug and understand it better. I hope the following article will help you out in understanding Plug.</description></item><item><title>Validate your passwords using Elixir and haveibeenpwned.com's API</title><link>https://ieftimov.com/post/haveibeenpwned-password-lookup-elixir/</link><pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/haveibeenpwned-password-lookup-elixir/</guid><description>Unless you&amp;rsquo;ve been living under a rock for the last couple of years, you probably know what two-factor authentication (2FA) is. It&amp;rsquo;s quite a neat trick actually - you have a password that you have to (obviously) enter correctly (first factor), but you also have to receive a second (random) code through a different medium, sometimes on a different device, that you have to enter to log in (second factor).</description></item><item><title>Data structures in Go: Stacks and queues</title><link>https://ieftimov.com/post/golang-datastructures-stacks-queues/</link><pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/golang-datastructures-stacks-queues/</guid><description>In a previous post1, we took a look at linked lists and how we can apply them in a hypothetical use-case. In this post, we will look at two similar but powerful data structures.
Modelling actions and history Think about Excel or Google docs. You know, the most ubiquitous applications for composing documents that humanity has invented. We&amp;rsquo;ve all used them in some capacity. As you might know, these apps come with various actions one can apply to a text.</description></item><item><title>Data structures in Go: Linked lists</title><link>https://ieftimov.com/post/golang-datastructures-linked-lists/</link><pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/golang-datastructures-linked-lists/</guid><description>Data structures and algorithms are the bread and butter of computer science. Although sometimes they appear scary to people, most of them have a simple explanation. Also, when explained well with a problem algorithms can be interesting and fun to learn and apply.
This post is aimed at people that are not comfortable with linked lists, or folks that want to see and learn how to build one with Golang.</description></item><item><title>Create and manage MacOS LaunchAgents using Go</title><link>https://ieftimov.com/post/create-manage-macos-launchd-agents-golang/</link><pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/create-manage-macos-launchd-agents-golang/</guid><description>If you have ever tried writing a daemon for MacOS you have met with launchd. For those that don&amp;rsquo;t have the experience, think of it as a framework for starting, stopping and managing daemons, applications, processes, and scripts. If you have any *nix experience the word daemon should not be too alien to you.
For those unfamiliar, a daemon is a program running in the background without requiring user input. A typical daemon might, for instance, perform daily maintenance tasks or scan a device for malware when connected.</description></item><item><title>Packing multiple binaries in a Golang package</title><link>https://ieftimov.com/post/golang-package-multiple-binaries/</link><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/golang-package-multiple-binaries/</guid><description>Recently, while writing a small Golang program for setting reminders I came across a small confusion that I guess most newcomers to Golang will have - how to organise a package in a way that will enable it to cleanly contain two or more binaries.
This post is not aimed at experienced Golang programmers, it&amp;rsquo;s mostly aimed at beginners to understand how to compose more complex packages, beyond making the usual &amp;ldquo;one package one binary&amp;rdquo; ones.</description></item><item><title>Understanding why and how to add idempotent requests to your APIs</title><link>https://ieftimov.com/post/understand-how-why-add-idempotent-requests-api/</link><pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/understand-how-why-add-idempotent-requests-api/</guid><description>Idempotency is an often used term in computer science. It&amp;rsquo;s meaning to some might not be known, to others it&amp;rsquo;s very well known. The explanation for idempotency on Wikipedia is:
&amp;hellip; the property of certain operations in mathematics and computer science that they can be applied multiple times without changing the result beyond the initial application.
Essentially, idempotency is the mathematical way of saying &amp;ldquo;one can apply a certain operation on something many times, without changing the result of the operation after the first time the operation is applied&amp;rdquo;.</description></item><item><title>Versioning REST APIs: The Theory and Using Grape in Ruby</title><link>https://ieftimov.com/post/versioning-ruby-grape-apis/</link><pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/versioning-ruby-grape-apis/</guid><description>Nowadays, having an API on top of your application is considered common. I&amp;rsquo;ve often been disapointed when I&amp;rsquo;ve been expecting an API of a product I like to find none. There are powerful tools out there that allow easy API integrations, like IFTTT.com. Also, if you want to build a mobile application to work aside your product (or maybe your product is mobile-first), then an API is a must-have - there’s no way around it.</description></item><item><title>What happens when you DELETE a resource?</title><link>https://ieftimov.com/post/when-you-delete-an-api-resource/</link><pubDate>Sat, 29 Oct 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/when-you-delete-an-api-resource/</guid><description>Have you ever found yourself publishing an API, either an internal or a public one? Have your ever heard from the consumers of those same APIs back? Are they happy about the functionality of your APIs and their design? You already know, there is no perfect design, but API design has to be taken very seriously. Why? Because evolving and changing APIS is hard and time consuming.
Imagine you are on a team in a company, that has set off to design a company-wide API guideline and a blueprint.</description></item><item><title>Sprinkle some HATEOAS on your Rails APIs</title><link>https://ieftimov.com/post/sprinkle-some-hateoas-on-rails-apis/</link><pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/sprinkle-some-hateoas-on-rails-apis/</guid><description>REST as a concept was introduced by Roy Fielding in his doctoral thesis, named Architectural Styles and the Design of Network-based Software Architectures. 16 years later, REST as an architecture is the most widely accepted way to design and build APIs. I am sure we have all heard about it, and most of us think we are building actual RESTful APIs. But, are we?
Let&amp;rsquo;s remind ourselves what REST is and then continue on something else that supplements REST, called HATEOAS.</description></item><item><title>The practicality of designing and describing your APIs</title><link>https://ieftimov.com/post/practicality-designing-describing-apis/</link><pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/practicality-designing-describing-apis/</guid><description>The web, as we all know, is driven by APIs. Since the rise of mobile applications and the JavaScript driven single-page applications, APIs became even more popular, as a unified way for the clients to communicate with the back-end. Most of the companies use internal APIs for different purposes. Some use them to expose resources, data or behaviour. Others, use them for authentication and authorisation, some do it for controlling the hardware layer with smart implementations under the hood.</description></item><item><title>Learn your tools: Navigating your Git History</title><link>https://ieftimov.com/post/learn-your-tools-navigating-git-history/</link><pubDate>Mon, 06 Jun 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/learn-your-tools-navigating-git-history/</guid><description>Starting a greenfield application everyday is nearly impossible, especially in your daily job. In fact, most of us are facing (somewhat) legacy codebases on a daily basis, and regaining the context of why some feature, or line of code exists in the codebase is very important. This is where git, the distributed version control system, is invaluable. Let&amp;rsquo;s dive in and see how we can use our git history and easily navigate through it.</description></item><item><title>How Rails handles status codes</title><link>https://ieftimov.com/post/how-rails-handles-status-codes/</link><pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/how-rails-handles-status-codes/</guid><description>Recently, I have been building an API as part of my day job. Rails is a great framework to build APIs in, and it has been a joy so far. When building the responses of the API, it&amp;rsquo;s paramount to understand what HTTP statuses you should utilize, which will in return help the consumers by providing more meaningful responses.
Sure, you could always have a status property in the response JSON, which will be a human-readable status code.</description></item><item><title>A bit about decorators and presenters</title><link>https://ieftimov.com/post/decorators-and-presenters/</link><pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/decorators-and-presenters/</guid><description>Object-oriented programming and design is (or, was?) a revolutionary way of thinking and designing programs. It introduced classes, objects, inheritance, polymorphism and many other ways to think about programming. As an addition, some very smart folks identified some pitfalls and patterns that occur in object-oriented programming and put them in books. That&amp;rsquo;s how we got a list of general code smells, design patterns and refactoring patterns that we can use in our everyday work.</description></item><item><title>Git history is underrated</title><link>https://ieftimov.com/post/git-history-is-underrated/</link><pubDate>Sat, 23 Apr 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/git-history-is-underrated/</guid><description>Most of us use Git on a daily basis. We have all read a book (or part of a book) about Git, we learned how to do commits, track additions and removals, work with branches and so on. But, there&amp;rsquo;s so much more to Git than just committing your changes. In this post I am going to rant a bit about how we don&amp;rsquo;t utilise the power of our Git history, and how one can actually start doing it.</description></item><item><title>Write your first Rubygems plugin</title><link>https://ieftimov.com/post/your-first-rubygem-plugin/</link><pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/your-first-rubygem-plugin/</guid><description>I don&amp;rsquo;t think that at this point Rubygems needs any introduction. Except if you have been living under a rock for the last 10 years or so. In that case, I think that you wouldn&amp;rsquo;t be here reading this blog. You would be having a problem understanding why someone would like to share what they are eating, or what they are doing at the moment. For the rest of you, have you heard that Rubygems is extensible?</description></item><item><title>You Can't Rescue Them All</title><link>https://ieftimov.com/post/you-cant-rescue-them-all/</link><pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/you-cant-rescue-them-all/</guid><description>Imagine you just woke up, took a shower and you immediately go to your coffee machine to make that strong, large, morning, double-shot, extra-spice-and-everything-nice cup of coffee. Sure, you go to the machine, press some buttons and the next thing you know, you are waiting for the coffee to start pouring into your cup. And then, something&amp;rsquo;s not right, and something starts to smell bad. A morning nightmare, right?
Nothing Works All the Time You know, most of the things in our daily lives do not work at 100%.</description></item><item><title>Refactoring in Ruby: Primitive Obsession</title><link>https://ieftimov.com/post/primitive-obsession-ruby/</link><pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/primitive-obsession-ruby/</guid><description>We&amp;rsquo;ve all been at this point where we have bloated our classes with primitive values all over the place. Usually, we drop in primitive constants that, for whatever reason, we think that are a good fit to the class. Or sometimes, we just dump primitive values instead of small objects, thinking &amp;ldquo;it&amp;rsquo;s okay, it&amp;rsquo;s just an attribute in the class&amp;rdquo;. But, does it always make sense?
The problem Say we have a project for a finance journalist who wants us to automate his text editor to do some random fixes to his texts, on the fly.</description></item><item><title>PostgreSQL Indexes: B-Tree</title><link>https://ieftimov.com/post/postgresql-indexes-btree/</link><pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/postgresql-indexes-btree/</guid><description>Indexes in relational databases are a very imporatant feature, that reduce the cost of our lookup queries. In the last post on the basics of indexes in PostgreSQL, we covered the fundamentals and saw how we can create an index on a table and measure it&amp;rsquo;s impact on our queries. In this post, we will take a dive into the inner workings and some implmentation details of the most used index type in PostgreSQL - the B-Tree index.</description></item><item><title>PostgreSQL Indexes: First Principles</title><link>https://ieftimov.com/post/postgresql-indexes-first-principles/</link><pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/postgresql-indexes-first-principles/</guid><description>We have all heard about indexes. Yeah, that thing that it&amp;rsquo;s automatically added to the Primary Key column that enables fast data retrieval and stuff. Sure, but have you ever asked yourself if there are multiple types or implementations of indexes? Or maybe, what type of indexes your favourite RDBMS implements? In this blog post, we will take a step back to the beginning, exploring what indexes are, what is their role, types of indexes, metrics and so on.</description></item><item><title>Building a Weather Widget using RxJS</title><link>https://ieftimov.com/post/build-weather-widget-rxjs/</link><pubDate>Sun, 24 Jan 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/build-weather-widget-rxjs/</guid><description>Reactive Programming is a very interesting programming paradigm that I started pondering with last week, which ended up in an article on this blog. Today, I will show you how you can write a very simple weather widget with reactive programming, using RxJS. Or, in other words, how to do HTTP calls in reactive programming fashion.
RxJS RxJS is an acronym for Reactive Extensions for JavaScript. Simply put, it is a set of libraries to do asynchronous and event-based programming using observable collections and iterators.</description></item><item><title>Understanding Reactive Programming with RxRuby</title><link>https://ieftimov.com/post/reactive-programing-rxruby/</link><pubDate>Tue, 19 Jan 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/reactive-programing-rxruby/</guid><description>Reactive Programming is a relatively new and interesting programming paradigm that has picked up quite a bit of popularity lately. Out of curiosity, I did a bit of research over the weekend. In this blog post I will summarize what I learned and try to explain what RP to any novice out there. Also, I show you how to use the Reactive Extensions for Ruby. Let&amp;rsquo;s dive in!
The Motivation I rarely have strong opinions, but I really think that to understand anything in life, you need to understand the motivation behind it.</description></item><item><title>Refactoring in Ruby: The right place for a Builder?</title><link>https://ieftimov.com/post/refactoring-builder-pattern/</link><pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/refactoring-builder-pattern/</guid><description>Recently I started tackling refactoring in Ruby with my blog posts. It seems that it&amp;rsquo;s one of the most popular topics that people would like to read about, so here I am with another installment of refactoring in Ruby. This time, we will see if it&amp;rsquo;s the right time and place for a Builder&amp;hellip; whatever that means.
Just a bit of backstory In my last post on refactoring in Ruby, I covered how to detect and refactor the long parameters code smell.</description></item><item><title>Running a Rails Application on Deis</title><link>https://ieftimov.com/post/running-rails-app-deis/</link><pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/running-rails-app-deis/</guid><description>In the last couple of years, we have seen a lot of development in the devops field. It’s becoming much easier for developers to provision servers and deploy their applications on those servers just with a couple of key strokes. Since the start of the SaaS and PaaS products (even before we knew them as that), we have seen a vast number of companies and communities try to make our lives easier by developing smart tools that will fit into our workflow seamlessly.</description></item><item><title>Refactoring in Ruby: Smelly Parameters Lists</title><link>https://ieftimov.com/post/refactoring-smelly-parameters-lists/</link><pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/refactoring-smelly-parameters-lists/</guid><description>Ruby is a really clear and expressive language, but we developers sure know how to make a mess. Even when you think your classes are nicely written and tested, things can still get out of hand. I am pretty sure you&amp;rsquo;ve heard one (or more) of your more experienced colleagues/mentors tell you that &amp;ldquo;something is smelly&amp;rdquo; in the code. Well, in this article we will cover one of the simplest code smells</description></item><item><title>Refactoring in Ruby: TDD your way through Extract Class</title><link>https://ieftimov.com/post/tdd-extract-class/</link><pubDate>Mon, 28 Dec 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/tdd-extract-class/</guid><description>There are a lot of refactoring patterns available out there for us. I assume that most of us use these patterns, at certain times without being aware that those refactoring steps are defined as a pattern in the past. In this post, I will take you through an example of refactoring Ruby code with the Extract Class pattern by using Test-Driven Development.
Let&amp;rsquo;s dive in!
What went wrong at the test?</description></item><item><title>Rails, Secure Cookies, HSTS and friends</title><link>https://ieftimov.com/post/rails-tls-hsts-cookies/</link><pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/rails-tls-hsts-cookies/</guid><description>Ruby on Rails as a framework does a lot of things for us developers. We get a very customizable middleware stack, great routing system, very expressive ORM, helpful modules with great utility methods in them and so on. But in Rails there&amp;rsquo;s more than meets the eye. It does some great things that we just take for granted or on occasions we don&amp;rsquo;t even know they exist.
Some of these features are TLS redirection, secure cookies and HTTP Strict Transport Security (HSTS).</description></item><item><title>Why and how to test Rake tasks in your Rails application</title><link>https://ieftimov.com/post/test-rake-tasks/</link><pubDate>Thu, 03 Dec 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/test-rake-tasks/</guid><description>Most of us write some Rake tasks and completely forget about them. In fact, we rarely give any love to our Rake tasks. Well, I think it&amp;rsquo;s time we change that. Let&amp;rsquo;s see why and how we can test our Rake tasks.
But, why? Yes, it&amp;rsquo;s a legit question. You can always say &amp;ldquo;I already tested my classes!&amp;rdquo;. But, there are couple of reasons why you should always test your Rake tasks:</description></item><item><title>Writing command line apps with Elixir</title><link>https://ieftimov.com/post/writing-elixir-cli-apps/</link><pubDate>Fri, 27 Nov 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/writing-elixir-cli-apps/</guid><description>Elixir is a really cool language. Although I do not have much experience with it (yet), I am always trying to build interesting stuff with it and learn the built-in tools. In this blog post I decided to show you how to build a self-contained command line application with Elixir, with some help from escript.
Escript Erlang and Elixir have this cool thing called escript. It&amp;rsquo;s basically a tool that compiles an Elixir app that you have as a command line application.</description></item><item><title>Getting Started with Minitest</title><link>https://ieftimov.com/post/getting-started-with-minitest/</link><pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/getting-started-with-minitest/</guid><description>Learn how to integrate Minitest into your Ruby project and reap the benefits of test-driven development.
Read the article here.
Liked this article? You can buy me a coffee. Or simply subscribe to my newsletter and get my fresh posts in your inbox. It's short and sweet, going out monthly to over 1,000 subscribers.</description></item><item><title>Testing Ruby Mixins with Minitest in isolation</title><link>https://ieftimov.com/post/testing-mixins-minitest/</link><pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-mixins-minitest/</guid><description>Mixins in Ruby are a very powerful feature. But knowing how to test them sometimes is not so obvious, especially to beginners. I think that this comes from mixins' nature - they get mixed into other classes. So, if you think that there is a lot to testing mixins and you easily get overwhelmed by it - take it easy, it&amp;rsquo;s not that hard.
Let&amp;rsquo;s see how easy it is to test mixins, with some help from the lovely Minitest.</description></item><item><title>Filter request params from Phoenix logs</title><link>https://ieftimov.com/post/filter-params-phoenix/</link><pubDate>Fri, 23 Oct 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/filter-params-phoenix/</guid><description>Phoenix is a really powerful and customizable framework. One of it&amp;rsquo;s small but important configurations is filtering custom params from the logs. I am sure that this will be more interesting to beginner than experienced developers, but nevertheless, let&amp;rsquo;s see what&amp;rsquo;s the motivation behind this and how to do it in Phoenix.
Motivation First, I&amp;rsquo;d like you to understand the motivation behind this and why this is useful. Think about it.</description></item><item><title>How to set tests as pending in your ExUnit suite</title><link>https://ieftimov.com/post/pending-tests-exunit/</link><pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/pending-tests-exunit/</guid><description>Elixir&amp;rsquo;s built in testing library is called ExUnit. It&amp;rsquo;s a proper testing framework, which, although simple, gives the developers a lot of power and flexibility. If you come from Ruby land, I am sure you&amp;rsquo;ve been in a position where you want to set a certain test to be skipped. For example, RSpec in Ruby does it with the pending method. Let&amp;rsquo;s see how we can customize our test suite so ExUnit can skip over tests in our test suite.</description></item><item><title>Write and publish your first Elixir library</title><link>https://ieftimov.com/post/writing-elixir-library/</link><pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/writing-elixir-library/</guid><description>As some of you have heard lately, Elixir is the new hotness. Is it just hype? Well, I thought so at first, but I told myself &amp;ldquo;heck, even if it&amp;rsquo;s a waste of time, at least I&amp;rsquo;ll broaden my horizons&amp;rdquo;. Which, if you think about it, it not really is a waste of time.
Long story short, after couple of weeks of fiddling with the language, mostly by playing with it&amp;rsquo;s web framework I am delighted to say that it&amp;rsquo;s a really cool language that you should try out and also, I published a really small API wrapper for Elixir.</description></item><item><title>Variable hoisting in Ruby</title><link>https://ieftimov.com/post/variable-hoisting-ruby/</link><pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/variable-hoisting-ruby/</guid><description>Have you ever heard of hoisting? Well, regardless if you have or you have not, Ruby has an interesting hositing mechanism built-in. Let&amp;rsquo;s take a dive and see how it creates variables and do some experiments with it.
Hoisting What is hoisting? Well, according to Google &amp;ldquo;hoist&amp;rdquo; means to raise something. Apparently, with with ropes and pulleys. At least, back in the day.
Well, when it comes to variable hoisting, it&amp;rsquo;s basically a mechanism by which the language, in our context - Ruby, declares and defines variables.</description></item><item><title>TDD Patterns: Humble Object</title><link>https://ieftimov.com/post/tdd-humble-object/</link><pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/tdd-humble-object/</guid><description>We all know that there are different design patterns. They are all quite trivial to learn, but, the trick lies in applying them. When should we use this or that pattern and will that help in making our code better and cleaner. Well, tests are code as well and, you guessed it, there are some testing patterns that are around for a while.
Today, we will take a look at one of them.</description></item><item><title>Test Doubles: in theory, in Minitest and in RSpec</title><link>https://ieftimov.com/post/test-doubles-theory-minitest-rspec/</link><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/test-doubles-theory-minitest-rspec/</guid><description>Those of us that do Test Driven Development have heard about doubles, mocks, stubs, fakes and spies multiple times. Unfortunately there is a ton of confusion about all these words and their meaning. Let&amp;rsquo;s see what each an every one of these really mean, where we should use them and how the popular testing frameworks for Ruby implement these.
Test Doubles So, first things first. One of the biggest misconceptions is that doubles are types of objects that are used in testing.</description></item><item><title>Exception handling and testing it with Minitest</title><link>https://ieftimov.com/post/exception-handling-and-testing/</link><pubDate>Wed, 29 Jul 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/exception-handling-and-testing/</guid><description>When testing our code, we usually go for the happy path (TM). We are awesome developers, we test our code, we are careful and there&amp;rsquo;s no way our code might crash. Or not really? I often try to think of software as a live being. It thinks, it does stuff and sometimes it gets some things wrong. Just like us. We sometimes trip up while walking, we drop our keys or forget them on our desk at the office.</description></item><item><title>Testing Ruby's floats precision</title><link>https://ieftimov.com/post/testing-floats-in-ruby/</link><pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/testing-floats-in-ruby/</guid><description>Float precision in Ruby is a well known quirk. But when testing floats, not many of us bother to remember this and make their tests respectful to this quirk. In this post we will see how the popular Ruby testing frameworks help us test floats properly.
Background story Last week I published a post about migrating a test suite from RSpec to Minitest. What was very interesting is that I got a mention on Twitter from Ryan Davis with an offer for a code review of the migration.</description></item><item><title>Migrating a test suite from RSpec to Minitest</title><link>https://ieftimov.com/post/migrate-rspec-to-minitest/</link><pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/migrate-rspec-to-minitest/</guid><description>I have always wanted to have some fun with Minitest but until this weekend I never got the chance to do it. For those of you that don&amp;rsquo;t know, Minitest is a suite of testing facilities, that support TDD, BDD, mocking and benchmarking. Having wanted to play with Minitest, this weekend I decided that I will migrate the test suite of a gem of mine, from RSpec to Minitest. Read on to see how it all went.</description></item><item><title>How to write Rails middleware</title><link>https://ieftimov.com/post/writing-rails-middleware/</link><pubDate>Tue, 07 Jul 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/writing-rails-middleware/</guid><description>In my last two posts about Rack, I wrote about the basics of Rack and how to write middleware. If you have no idea what this is about, I recommend reading the last two posts (in the order above). For the rest of you, carry on - today we will see how to write awesome Rails middleware and how to use it in any Rails application. Rails and Rack play together really nice, so keep on reading!</description></item><item><title>Rack: Writing middleware</title><link>https://ieftimov.com/post/writing-rack-middleware/</link><pubDate>Sun, 28 Jun 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/writing-rack-middleware/</guid><description>Last time I wrote about the basics of Rack and writing a tiny Rack application. If you are unsure what Rack is and what is it&amp;rsquo;s purpose, I recommend you read the other post, famirialize yourself with Rack and get back to this post. If you think you know enough about Rack, please, carry on reading.
Enter: Middleware So, middleware. Lets take it from the basics. What is middleware? Remember that Rack &amp;ldquo;wraps&amp;rdquo; HTTP requests and responses?</description></item><item><title>Rack: First Principles</title><link>https://ieftimov.com/post/rack-first-principles/</link><pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/rack-first-principles/</guid><description>About three years ago, when I started working with Ruby and Rails, I noticed that the term &amp;ldquo;Rack&amp;rdquo; always came up in my Google searches. Overwhelmed with all of the stuff I needed to learn combined with the awesomeness of Rails, which shields the new Rails devs from it&amp;rsquo;s internals, I never really understood Rack or writing Rack apps. Although I used to see people mentioning &amp;ldquo;middleware&amp;rdquo; or &amp;ldquo;Rack middleware&amp;rdquo; I never really wrote (or tried to write) any middleware.</description></item><item><title>In and out of PostgreSQL using COPY</title><link>https://ieftimov.com/post/postgresql-copy/</link><pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/postgresql-copy/</guid><description>I am pretty sure everyone of us has been in a situation where you needed to generate a report and/or extract some data from a database and present it in a spreadsheet. In many cases, our clients prefer Excel to handle spreadsheets/reports, because, duh, it&amp;rsquo;s Excel.
So, how do you approach this problem? Do you copy and paste data? Or use a RDBMS GUI to generate the report into a spreadsheet?</description></item><item><title>Implementing "the lovely" Singleton Pattern</title><link>https://ieftimov.com/post/singleton-pattern/</link><pubDate>Tue, 26 May 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/singleton-pattern/</guid><description>In every software, there are some things that have to be unique. For example, a Rails app has only one logger. Also, applications must have configurations, like environment, various API keys and etc. Take the configuration example - we need only one configuration for a runtime of an application. If all of the configuration data is stored into a class, then the whole app will need to use an object of that class.</description></item><item><title>POV: Startup Weekend Skopje</title><link>https://ieftimov.com/post/my-swsk-xp/</link><pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/my-swsk-xp/</guid><description>Startup - in my opinion it&amp;rsquo;s the most ear-catching word nowadays. It represents growth, energy and, of course, billions of dollars. But yeah, a billion of dollars over a weekend is next to impossible. So, why would you attend a startup weekend? What&amp;rsquo;s the benefit? Or, if you know the answers to these questions, you probably would like to know how to win? Yeah, everybody would like that&amp;hellip;
This year, it was my first time to attend a startup weekend and it happened in the city where I live - Skopje, Macedonia.</description></item><item><title>How to: YourGem.configure</title><link>https://ieftimov.com/post/how-to-yourgem-configure/</link><pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/how-to-yourgem-configure/</guid><description>Really cool gems, like Carrierwave for example, have this neat feature of configuring the gem in runtime. It allows you to easily configure how the gem will behave in your app. For example, you can add various authentication keys, how errors should be handled and what not. If you want to add this cool functionality in your gems, read on to find out more.
Personally, I love to implement (and use) this way of configuring libraries in runtime.</description></item><item><title>RailsConf 2015 talks that you should watch</title><link>https://ieftimov.com/post/railsconf-2015-talks-that-you-should-watch/</link><pubDate>Mon, 04 May 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/railsconf-2015-talks-that-you-should-watch/</guid><description>Recently Confreaks uploaded a ton of RailsConf 2015 talks on Youtube. Although I haven&amp;rsquo;t watched all of the talks, these are some of the ones that in my opinion are very worth watching. Keep in mind that this list will grow as I watch more talks over time. So, without further ado&amp;hellip;
So You Want to Start Refactoring? by @j3foley In this talk, Jillian Foley talks about refactoring. She shares some techniques about how to approach code that you haven&amp;rsquo;t written and how to easily refactor it.</description></item><item><title>How to write RSpec formatters from scratch</title><link>https://ieftimov.com/post/how-to-write-rspec-formatters-from-scratch/</link><pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/how-to-write-rspec-formatters-from-scratch/</guid><description>Recently I did an experiment with RSpec&amp;rsquo;s formatters. Turns out, the output that RSpec returns when you run your specs can be very customized for your own needs. Read on to learn how you can write custom RSpec formatters.
Writing custom formatters RSpec allows customization of the output by creating your own Formatter class. Yep, it&amp;rsquo;s that easy. You just need to write one class and than require it into RSpec&amp;rsquo;s configuration to use it.</description></item><item><title>Pattern to pattern: Template Method &amp; Strategy</title><link>https://ieftimov.com/post/pattern-to-pattern-template-method-and-strategy/</link><pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/pattern-to-pattern-template-method-and-strategy/</guid><description>Recently I wrote about the Template Method pattern and how it&amp;rsquo;s implemented in Ruby. In the comments, one of the readers commented that the Template Method pattern is in fact the Strategy pattern. After thinking hard about how I should answer the question, I thought about writing a post comparing the two patterns. So, here it is - my version of design patterns head to head. Let&amp;rsquo;s see what these two patterns have in common and what are their key differences.</description></item><item><title>Exploring new methods in Ruby 2.2.0</title><link>https://ieftimov.com/post/exploring-new-methods-in-ruby-two-point-two/</link><pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/exploring-new-methods-in-ruby-two-point-two/</guid><description>For those late to the Ruby 2.2.0 party like me, aside from the changes (and updates) the core team made under the hood for this version, they introduced couple of new methods to the Enumerable module and to the_ Method, Float, File_ and _String_ classes. Lets take a look at these methods and explore how we can use them in our everyday jobs. Just a heads up, make sure you **use Ruby 2.</description></item><item><title>Using multiple sources in a Gemfile</title><link>https://ieftimov.com/post/using-multiple-sources-in-a-gemfile/</link><pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/using-multiple-sources-in-a-gemfile/</guid><description>Gemfiles require at least one gem source, in the form of the URL for a RubyGems server. Although it&amp;rsquo;s not recommended, it&amp;rsquo;s possible as of Bundler 1.7, to add multiple global source lines. Each of these sources has to be a valid Rubygems repository.
When using multiple sources, bundler shows a warning message:
Although, this warning can be disabled by running the
bundle config disable_multisource true
command, there&amp;rsquo;s a better approach to this.</description></item><item><title>Template Method Pattern in Ruby</title><link>https://ieftimov.com/post/template-method-pattern-in-ruby/</link><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/template-method-pattern-in-ruby/</guid><description>When working as a software developer, knowledge of some design patterns is always welcomed. If you&amp;rsquo;ve never heard about design patterns, they are basically some general reusable patterns for common problems that developers run into. There&amp;rsquo;s a big list of these and knowing all of them is a bit hard. Well, hard might not be the right word, but it takes a lot of practice to master them all. Lets take a look at one of the (in my opinion) easier patterns - the Template Method Pattern and implement it in Ruby.</description></item><item><title>AngularJS Services Part 4: Value and Constant</title><link>https://ieftimov.com/post/angularjs-services-part-4/</link><pubDate>Sun, 01 Mar 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/angularjs-services-part-4/</guid><description>So far we saw the magic of creating AngularJS services using Provider, Factory and Service. In this post, we will look at two more types of services - Value and Constant.
Value The Value service is basically a service that returns a single value, like, string, object, number or an array. For instance:
1 2 3 4 5 6 7 8 9 10 11 12 13 (function(){ angular.module(&amp;#39;app&amp;#39;, []) .</description></item><item><title>AngularJS Services Part 3: Service</title><link>https://ieftimov.com/post/angularjs-services-part-3/</link><pubDate>Sat, 28 Feb 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/angularjs-services-part-3/</guid><description>So, Service is basically the same as Factory, it just has one key difference. Service treats the function as a constructor, meaning, the service will call new on the function and return the resulting object as a service object. Oh, if you haven&amp;rsquo;t yet read about Factory, check out AngularJS Services Part 2: Factory.
Using Service Declaring a Service is easy. Lets look at an example.
1 2 3 4 5 6 7 8 9 10 (function(){ angular.</description></item><item><title>AngularJS Services Part 2: Factory</title><link>https://ieftimov.com/post/angularjs-services-part-2/</link><pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/angularjs-services-part-2/</guid><description>If you don&amp;rsquo;t know the basics of AngularJS service, I recommend you read the other article I wrote on AngularJS Services Part 1: Provider.
Provider v.s. Factory Factory is a thin wrapper on top of Provider. While Provider provides us the ability to configure the service provider before injection (creating the service object), Factory lacks that ability.
Although it is short of this functionality, most of the Angular devs use factories because they are, in my opinion, the easiest to use and really cover all the general needs that one might need from a service.</description></item><item><title>AngularJS Services Part 1: Provider</title><link>https://ieftimov.com/post/angularjs-services-part-1/</link><pubDate>Wed, 25 Feb 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/angularjs-services-part-1/</guid><description>I started using AngularJS couple of months ago, when we got a new client that wanted us to help with building an app written in Angular.
After couple of months of using it, I found myself struggling with uber-phat controllers and I started thinking of solutions about extracting knowledge out of the controller into separate entities. Also, having the ability to easily inject those entities back into the controller is a must.</description></item><item><title>SOLID Principles in Ruby</title><link>https://ieftimov.com/post/solid-principles-ruby/</link><pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/solid-principles-ruby/</guid><description>Regardless of your knowledge level, as a programmer you love to write awesome code. It&amp;rsquo;s what we do. We like it and we do it every single day. But, we all know that writing awesome code is not easy at all. So, how can we improve the code we produce every day?
An awareness (or a reminder!) of SOLID principles is beneficial here. SOLID is a group of five principles that when applied correctly can help us produce better code.</description></item></channel></rss>