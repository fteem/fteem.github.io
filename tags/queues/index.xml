<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Queues on Ilija Eftimov</title>
    <link>https://ieftimov.com/tags/queues/</link>
    <description>Recent content in Queues on Ilija Eftimov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 24 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ieftimov.com/tags/queues/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data structures in Go: Stacks and queues</title>
      <link>https://ieftimov.com/post/golang-datastructures-stacks-queues/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/golang-datastructures-stacks-queues/</guid>
      <description>In a previous post, we took a look at linked lists and how we can apply them in a hypothetical use-case. In this post, we will look at two similar but powerful data structures.
Modelling actions and history Think about Excel or Google docs. You know, the most ubiquitous applications for composing documents that humanity has invented. We&amp;rsquo;ve all used them in some capacity. As you might know, these apps come with various actions one can apply to a text.</description>
    </item>
    
  </channel>
</rss>