<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>strategy on Ilija Eftimov</title>
    <link>https://ieftimov.com/tags/strategy/</link>
    <description>Recent content in strategy on Ilija Eftimov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2014 - 2019 Ilija Eftimov</copyright>
    <lastBuildDate>Wed, 22 Apr 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ieftimov.com/tags/strategy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pattern to pattern: Template Method &amp; Strategy</title>
      <link>https://ieftimov.com/post/pattern-to-pattern-template-method-strategy/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/pattern-to-pattern-template-method-strategy/</guid>
      <description>Recently I wrote about the Template Method pattern and how it&#39;s implemented in Ruby. In the comments, one of the readers commented that the Template Method pattern is in fact the Strategy pattern. After thinking hard about how I should answer the question, I thought about writing a post comparing the two patterns. So, here it is - my version of design patterns head to head. Let&#39;s see what these two patterns have in common and what are their key differences.</description>
    </item>
    
  </channel>
</rss>