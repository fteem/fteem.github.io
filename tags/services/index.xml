<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>services on Ilija Eftimov ⚡️</title><link>https://ieftimov.com/tags/services/</link><description>Recent content in services on Ilija Eftimov ⚡️</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright 2021 © Ilija Eftimov</copyright><lastBuildDate>Sun, 01 Mar 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://ieftimov.com/tags/services/index.xml" rel="self" type="application/rss+xml"/><item><title>AngularJS Services Part 4: Value and Constant</title><link>https://ieftimov.com/post/angularjs-services-part-4/</link><pubDate>Sun, 01 Mar 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/angularjs-services-part-4/</guid><description>So far we saw the magic of creating AngularJS services using Provider, Factory and Service. In this post, we will look at two more types of services - Value and Constant.
Value The Value service is basically a service that returns a single value, like, string, object, number or an array. For instance:
(function(){ angular.module(&amp;#39;app&amp;#39;, []) .value(&amp;#34;Number&amp;#34;, 24) .value(&amp;#34;String&amp;#34;, &amp;#34;Hey, how are you?&amp;#34;) .value(&amp;#34;Object&amp;#34;, { prop1: &amp;#39;prop1&amp;#39;, prop2: &amp;#39;prop2&amp;#39; }) .</description></item><item><title>AngularJS Services Part 3: Service</title><link>https://ieftimov.com/post/angularjs-services-part-3/</link><pubDate>Sat, 28 Feb 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/angularjs-services-part-3/</guid><description>So, Service is basically the same as Factory, it just has one key difference. Service treats the function as a constructor, meaning, the service will call new on the function and return the resulting object as a service object. Oh, if you haven&amp;rsquo;t yet read about Factory, check out AngularJS Services Part 2: Factory.
Using Service Declaring a Service is easy. Lets look at an example.
(function(){ angular.module(&amp;#39;app&amp;#39;, []) .service(&amp;#34;GreetingService&amp;#34;, GreetingService); function GreetingService(){ this.</description></item><item><title>AngularJS Services Part 2: Factory</title><link>https://ieftimov.com/post/angularjs-services-part-2/</link><pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/angularjs-services-part-2/</guid><description>If you don&amp;rsquo;t know the basics of AngularJS service, I recommend you read the other article I wrote on AngularJS Services Part 1: Provider.
Provider v.s. Factory Factory is a thin wrapper on top of Provider. While Provider provides us the ability to configure the service provider before injection (creating the service object), Factory lacks that ability.
Although it is short of this functionality, most of the Angular devs use factories because they are, in my opinion, the easiest to use and really cover all the general needs that one might need from a service.</description></item><item><title>AngularJS Services Part 1: Provider</title><link>https://ieftimov.com/post/angularjs-services-part-1/</link><pubDate>Wed, 25 Feb 2015 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/angularjs-services-part-1/</guid><description>I started using AngularJS couple of months ago, when we got a new client that wanted us to help with building an app written in Angular.
After couple of months of using it, I found myself struggling with uber-phat controllers and I started thinking of solutions about extracting knowledge out of the controller into separate entities. Also, having the ability to easily inject those entities back into the controller is a must.</description></item><item><title>SOLID Principles in Ruby</title><link>https://ieftimov.com/post/solid-principles-ruby/</link><pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate><guid>https://ieftimov.com/post/solid-principles-ruby/</guid><description>Regardless of your knowledge level, as a programmer you love to write awesome code. It&amp;rsquo;s what we do. We like it and we do it every single day. But, we all know that writing awesome code is not easy at all. So, how can we improve the code we produce every day?
An awareness (or a reminder!) of SOLID principles is beneficial here. SOLID is a group of five principles that when applied correctly can help us produce better code.</description></item></channel></rss>