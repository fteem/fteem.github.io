<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Ilija Eftimov</title>
    <link>https://ieftimov.com/tags/testing/</link>
    <description>Recent content in Testing on Ilija Eftimov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 28 Apr 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ieftimov.com/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing Ruby Mixins with Minitest in isolation</title>
      <link>https://ieftimov.com/post/testing-mixins-minitest/</link>
      <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/testing-mixins-minitest/</guid>
      <description>Mixins in Ruby are a very powerful feature. But knowing how to test them sometimes is not so obvious, especially to beginners. I think that this comes from mixins&amp;rsquo; nature - they get mixed into other classes. So, if you think that there is a lot to testing mixins and you easily get overwhelmed by it - take it easy, it&amp;rsquo;s not that hard.
Let&amp;rsquo;s see how easy it is to test mixins, with some help from the lovely Minitest.</description>
    </item>
    
    <item>
      <title>How to write RSpec formatters from scratch</title>
      <link>https://ieftimov.com/post/how-to-write-rspec-formatters-from-scratch/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ieftimov.com/post/how-to-write-rspec-formatters-from-scratch/</guid>
      <description>Recently I did an experiment with RSpec&amp;rsquo;s formatters. Turns out, the output that RSpec returns when you run your specs can be very customized for your own needs. Read on to learn how you can write custom RSpec formatters.
Writing custom formatters RSpec allows customization of the output by creating your own Formatter class. Yep, it&amp;rsquo;s that easy. You just need to write one class and than require it into RSpec&amp;rsquo;s configuration to use it.</description>
    </item>
    
  </channel>
</rss>