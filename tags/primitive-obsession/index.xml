<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>primitive obsession on Ilija Eftimov</title>
    <link>https://ieftimov.com/tags/primitive-obsession/</link>
    <description>Recent content in primitive obsession on Ilija Eftimov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright Â© Ilija Eftimov</copyright>
    <lastBuildDate>Tue, 08 Mar 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ieftimov.com/tags/primitive-obsession/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        <item>
          <title>Refactoring in Ruby: Primitive Obsession</title>
          <link>https://ieftimov.com/post/primitive-obsession-ruby/</link>
          <pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate>
          
          <guid>https://ieftimov.com/post/primitive-obsession-ruby/</guid>
          <description>We&#39;ve all been at this point where we have bloated our classes with primitive values all over the place. Usually, we drop in primitive constants that, for whatever reason, we think that are a good fit to the class. Or sometimes, we just dump primitive values instead of small objects, thinking &amp;ldquo;it&#39;s okay, it&#39;s just an attribute in the class&amp;rdquo;. But, does it always make sense?
The problem Say we have a project for a finance journalist who wants us to automate his text editor to do some random fixes to his texts, on the fly.</description>
        </item>
      
    
  </channel>
</rss>


